// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3620.FRC3620_Killer_Rabbit.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.slf4j.Logger;
import org.usfirst.frc3620.FRC3620_Killer_Rabbit.Robot;
import org.usfirst.frc3620.logger.EventLogging;
import org.usfirst.frc3620.logger.EventLogging.Level;

/**
 *
 */
public class IntakeCommand extends Command {
	Logger logger = EventLogging.getLogger(getClass(), Level.DEBUG);

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public IntakeCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    boolean joystickButtonWasPressed = true;
    boolean rollersWereSpinningWhenStarted = false;
    // Called just before this Command runs the first time
    protected void initialize() {
    	joystickButtonWasPressed = true;
    	rollersWereSpinningWhenStarted = Robot.intakeSubsystem.getWeAreIntaking();
    	logger.info ("Starting IntakeCommand, rollersWereSpinning = {}", rollersWereSpinningWhenStarted);
    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if (rollersWereSpinningWhenStarted) {
    		//this is if the rollers have already started
    
    	}
    	else { 
    	Robot.intakeSubsystem.takeIn();
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	logger.debug("Intake Command isFinished");
    	System.out.println("Intake Command Is Finished");
    	if (rollersWereSpinningWhenStarted) {
    		
    	}
    	else {
    		boolean joystickButtonIsPressed = Robot.oi.intakeButton.get();
    		logger.info("IntakeCommand: ispressed = {}, waspressed = {}", joystickButtonIsPressed, joystickButtonWasPressed);
    		if (joystickButtonIsPressed && !joystickButtonWasPressed) return true;
    		joystickButtonWasPressed = Robot.oi.intakeButton.get();
    		if (Robot.intakeSubsystem.ballIsInIntake()) return true;
    	}
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	logger.info ("End IntakeCommand");
    	Robot.intakeSubsystem.intakeStop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
    
}
