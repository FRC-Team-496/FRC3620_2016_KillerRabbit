// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3620.FRC3620_Killer_Rabbit.subsystems;

import org.slf4j.Logger;
import org.usfirst.frc3620.FRC3620_Killer_Rabbit.Robot;
import org.usfirst.frc3620.FRC3620_Killer_Rabbit.RobotMap;
import org.usfirst.frc3620.FRC3620_Killer_Rabbit.commands.*;
import org.usfirst.frc3620.logger.EventLogging;
import org.usfirst.frc3620.logger.EventLogging.Level;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class ArmSubsystem extends Subsystem {
	Logger logger = EventLogging.getLogger(getClass(), Level.INFO);

	static final double loSetPoint = 0;
	static final double hiSetPoint = 0.75;
	static final double cushion = 0.1;
	static final double creepPower = 0.25;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private final CANTalon armCANTalon = RobotMap.armSubsystemArmCANTalon;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public ArmSubsystem() {
		super();

		// TODO Auto-generated constructor stub
		//armCANTalon.changeControlMode(TalonControlMode.Position);
		weAreInManualMode = true;
		armCANTalon.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Absolute);
		armCANTalon.reverseSensor(true);
		armCANTalon.setPID(0.7, .00001, 0.01);
		//armCANTalon.setSetpoint(loSetPoint);
		logger.info("encoder position is " + armCANTalon.getEncPosition());
		// armCANTalon.setEncPosition(0);
		logger.info("now the encoder position is " + armCANTalon.getEncPosition());
		setManualPower(0);
	}

	boolean weAreInManualMode = false;

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void raiseArm() {
		if (weAreInManualMode) {
			logger.info("flipping into automatic");
			armCANTalon.changeControlMode(TalonControlMode.Position);
			weAreInManualMode = false;
		}
		armCANTalon.setSetpoint(hiSetPoint);
		logger.info("setting setpoint to = " + hiSetPoint);
	}

	public void lowerArm() {
		if (weAreInManualMode) {
			logger.info("flipping into automatic");
			armCANTalon.changeControlMode(TalonControlMode.Position);
			weAreInManualMode = false;
		}
		armCANTalon.setSetpoint(loSetPoint);
		logger.info("setting setpoint = " + loSetPoint);
	}

	public void goIntoAutomaticMode() {
		if (weAreInManualMode) {
			logger.info("flipping into automatic");
			armCANTalon.changeControlMode(TalonControlMode.Position);
			weAreInManualMode = false;

			//Makes sure the new setpoint stays between the low and high setpoints.
			double encoderPosition = armCANTalon.getPosition();
			double desiredSetpoint = encoderPosition;
			desiredSetpoint = Math.max(loSetPoint, desiredSetpoint);
			desiredSetpoint = Math.min(hiSetPoint, desiredSetpoint);
			armCANTalon.setSetpoint(desiredSetpoint);
			logger.info("encoder position is " + encoderPosition);
			logger.info("setting setpoint to " + armCANTalon.getSetpoint());
		}
	}

	public void setManualPower(double power) {
		if (!weAreInManualMode) {
			logger.info("flipping into manual");
			// TODO double check this - Voltage or VBus?
			armCANTalon.changeControlMode(TalonControlMode.PercentVbus);
			weAreInManualMode = true;

		}
		double adjustedPower = 0;
		double position = armCANTalon.getPosition();
		if (power < 0) {
			if (position < loSetPoint) {
				adjustedPower = 0;
			} else if (position < loSetPoint + cushion) {
				adjustedPower = Math.max(-creepPower, power);
			} else {
				adjustedPower = power;
			}
		} else {
			if (position > hiSetPoint) {
				adjustedPower = 0;
			} else if (position > hiSetPoint - cushion) {
				adjustedPower = Math.min(creepPower, power);
			} else {
				adjustedPower = power;
			}
		}
		armCANTalon.set(adjustedPower);
		if (adjustedPower != power) {
			logger.info("arm power {} adjusted to {}", power, adjustedPower);
		}
	}

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		setDefaultCommand(new ArmManualCommand());

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}
}
