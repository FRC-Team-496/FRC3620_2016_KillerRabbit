// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3620.FRC3620_Killer_Rabbit.subsystems;



import org.slf4j.Logger;
import org.usfirst.frc3620.FRC3620_Killer_Rabbit.RobotMap;
import org.usfirst.frc3620.FRC3620_Killer_Rabbit.commands.*;
import org.usfirst.frc3620.logger.EventLogging;
import org.usfirst.frc3620.logger.EventLogging.Level;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class ShooterSubsystem extends Subsystem {
	Logger logger = EventLogging.getLogger(getClass(), Level.INFO);

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    public ShooterSubsystem() {
		super();
		
		shooterCANTalon3.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
		//shooterCANTalon3.set(shooterCANTalon2.getDeviceID());
		
		// TODO Auto-generated constructor stub
	}

    private final CANTalon shooterCANTalon2 = RobotMap.shooterSubsystemShooterCANTalon2;
    private final CANTalon shooterCANTalon3 = RobotMap.shooterSubsystemShooterCANTalon3;
    private final SpeedController shooterPositionTalon = RobotMap.shooterSubsystemShooterPositionTalon;
    
    boolean shooterWasRunning;
    
    Timer timer = new Timer();
    
    /*public void ShootOut()
    {
    	shooterCANTalon2.set(1);
    }

    public void ShootOutReverse()
    {
    	shooterCANTalon2.set(-1);
    }
    
    public void ShootOutStop()
    {
    	shooterCANTalon2.set(0)
    }*/
    public void setPower(double power)
    {
    	
    	shooterCANTalon2.set(power);
    	shooterCANTalon3.set(power);
		if (power == 0) 
		{
			//Motors are off here.
			if (shooterWasRunning)
			{
				//We just turned the shooter off.
				logger.info("Shooter just stopped running");
		    	timer.stop();
				timer.reset();
			}
			shooterWasRunning=false;
		}
		else
		{
			//Motors are on here.
			if (!shooterWasRunning)
			{				
				//We just turned the shooter on.
				logger.info("Shooter just started running");
				timer.start();
			}
			shooterWasRunning=true;
		}
    }
    
    public void setUpTalons()
    {
    	shooterCANTalon3.changeControlMode(CANTalon.TalonControlMode.Follower);
		shooterCANTalon3.set(shooterCANTalon2.getDeviceID());
    }
    
    public boolean checkShooter()
    {
		return timer.get() > 1;
    }
    
    public void moveShooterPositionUp()
    {
    	shooterPositionTalon.set(0.5);
    }
    
    public void moveShooterPositionDown()
    {
    	shooterPositionTalon.set(-0.5);

    }
    
    public void stopShooterPositionTalon()
    {
    	shooterPositionTalon.set(0);
    }
    
    public void initDefaultCommand() {

    	setDefaultCommand(new ShooterTiltCommand());

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

